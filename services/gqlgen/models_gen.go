// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlgen

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/nassimelhormi/ecrpe-api/models"
)

type DocUploadFile struct {
	Title string         `json:"title"`
	File  graphql.Upload `json:"file"`
}

type NewSessionCourse struct {
	RefresherCourseID int              `json:"refresherCourseId"`
	Title             string           `json:"title"`
	Type              string           `json:"type"`
	Description       string           `json:"description"`
	Part              int              `json:"part"`
	RecordedOn        time.Time        `json:"recordedOn"`
	VideoFile         graphql.Upload   `json:"videoFile"`
	DocFiles          []*DocUploadFile `json:"docFiles"`
}

type NewUser struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type RefresherCourse struct {
	ID         int        `json:"id"`
	Year       *string    `json:"year"`
	IsFinished *bool      `json:"isFinished"`
	Price      *float64   `json:"price"`
	CreatedAt  *time.Time `json:"createdAt"`
	UpdatedAt  *time.Time `json:"updatedAt"`
	Subject    *Subject   `json:"subject"`
	Sessions   []*Session `json:"sessions"`
}

type Session struct {
	ID          int                  `json:"id"`
	Title       *string              `json:"title"`
	Description *string              `json:"description"`
	RecordedOn  *time.Time           `json:"recordedOn"`
	CreatedAt   *time.Time           `json:"createdAt"`
	UpdatedAt   *time.Time           `json:"updatedAt"`
	Video       *models.Video        `json:"video"`
	ClassPapers []*models.ClassPaper `json:"classPapers"`
}

type Subject struct {
	ID               int                `json:"id"`
	Name             *string            `json:"name"`
	Active           *bool              `json:"active"`
	CreatedAt        *time.Time         `json:"createdAt"`
	UpdatedAt        *time.Time         `json:"updatedAt"`
	RefresherCourses []*RefresherCourse `json:"refresherCourses"`
}

type UpdatedUser struct {
	Username *string `json:"username"`
	Email    *string `json:"email"`
	Password string  `json:"password"`
}

type User struct {
	ID               int                `json:"id"`
	Username         *string            `json:"username"`
	Email            *string            `json:"email"`
	IsTeacher        *bool              `json:"isTeacher"`
	CreatedAt        *time.Time         `json:"createdAt"`
	UpdatedAt        *time.Time         `json:"updatedAt"`
	RefresherCourses []*RefresherCourse `json:"refresherCourses"`
}

type UserLogin struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Role string

const (
	RoleTeacher Role = "TEACHER"
	RoleUser    Role = "USER"
)

var AllRole = []Role{
	RoleTeacher,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleTeacher, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
