# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type ClassPaper @hasRole(role: USER){
  id: ID!
  title: String
  path: String
  createdAt: Time
  updatedAt: Time
}

type RefresherCourse {
  id: ID!
  year: String
	isFinished: Boolean
  price: Float
  createdAt: Time
  updatedAt: Time
  subject: Subject
  sessions: [Session] @hasRole(role: USER)
}

type Session @hasRole(role: USER){
  id: ID!
  title: String
  description: String
  recordedOn: Time
  createdAt: Time
  updatedAt: Time
  video: Video
  classPapers: [ClassPaper]
}

type Subject {
  id: ID!
  name: String
  active: Boolean
	createdAt: Time
	updatedAt: Time
  refresherCourses: [RefresherCourse]
}

type Token {
  jwt: String!
  refreshToken: String!
}

type User {
  id: ID!
  username: String
  email: String
  isTeacher: Boolean
  createdAt: Time
  updatedAt: Time
  refresherCourses: [RefresherCourse] @hasRole(role: USER)
}

type Video @hasRole(role: USER){
  id: ID!
  uuid: String
  path: String
  duration: String
  isEncoded: Boolean
  createdAt: Time
  updatedAt: Time
}

type Query {
  ## not logged in
  login(input: UserLogin!): Token!
  "don't display price if already bought"
  getRefresherCourses(subjectId: Int): [RefresherCourse!]!
  getRefresherCourse(refresherCourseId: Int!): RefresherCourse!
  ## logged in
  videoUserCheck: Boolean! @hasRole(role: USER)
  myProfil(userId: Int!): User! @hasRole(role: USER)
  myRefrescherCourses(userId: Int!): [RefresherCourse!]! @hasRole(role: USER)
  getSessionCourse(sessionId: Int!): Session! @hasRole(role: USER)
}

type Mutation {
  ## not logged in
  createUser(input: NewUser!): Boolean!
  ## logged in as USER
  refreshToken: Token! @hasRole(role: USER)
  updateUser(input: UpdatedUser!): Boolean! @hasRole(role: USER)
  purchaseRefresherCourse(refresherCourseId: Int!): [Session!]! @hasRole(role: USER)
  ## logged in as TEACHER
  createRefresherCourse(input: NewSessionCourse!): Boolean! @hasRole(role: TEACHER)
}

input NewSessionCourse {
  refresherCourseId: Int!
  title: String!
  type: String!
  description: String!
  part: Int!
  recordedOn: Time!
  videoFile: Upload!
  docFiles: [DocUploadFile]
}

input DocUploadFile {
  title: String!
  file: Upload!
}

input UserLogin {
  email: String!
  password: String!
}

input NewUser {
  username: String!
  email: String!
  password: String!
}

input UpdatedUser {
  username: String
  email: String
  password: String!
}

scalar Time
scalar Upload

directive @hasRole(role: Role!) on OBJECT | QUERY | MUTATION

enum Role {
  TEACHER
  USER
}
